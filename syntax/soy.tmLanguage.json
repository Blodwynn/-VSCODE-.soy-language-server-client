{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "soy",
	"patterns": [
		{
			"include": "#strings"
		},
		{
			"include": "#soy"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#html"
		}
	],
	"repository": {
		"soy": {
			"patterns": [
				{
					"begin": "{",
					"end": "}",
					"beginCaptures": {
						"0": {
							"name": "support.variable"
						}
					},
					"endCaptures": {
						"0": {
							"name": "support.variable"
						}
					},
					"patterns": [
						{
							"name": "entity.name.tag",
							"match": "\\b(sp|literal|else)\\b"
						},
						{
							"name": "entity.name.tag",
							"match": "\\b(foreach|if|switch|case|let|for|in)\\b"
						},
						{
							"match": "\\b(deltemplate|template) ([\\w\\d.]+)",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"match": "\\b(call|delcall) ([\\w\\d.]+)?",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"match": "\\b(param)(?: (\\w+)\\s*:?)?",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "entity.name.type"
								}
							}
						},
						{
							"match": "\\b(kind|autoescape|allowemptydefault|variant)=",
							"captures": {
								"1": {
									"name": "support.function"
								}
							}
						},
						{
							"match": "\\b(namespace|delpackage|package) ([\\w\\d.]*)",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"match": "\\b(alias) ([\\w.]*)",
							"captures": {
								"1": {
									"name": "entity.name.type"
								},
								"2": {
									"name": "constant.other"
								}
							}
						},
						{
							"name": "entity.name.tag",
							"match": "/\\b(deltemplate|template|foreach|call|delcall|let|param|if|switch|literal)\\b"
						},
						{
							"name": "variable.parameter",
							"match": "\\$[\\w\\d.?\\[\\]]+"
						},
						{
							"name": "entity.name.tag",
							"match": "\\b(not|or|and|true|false|null)\\b"
						},
						{
							"name": "keyword.control",
							"match": "\\b(length|isFirst|isLast|index|isNonnull|keys|augmentMap|quoteKeysIfJs|round|floor|ceiling|min|max|randomInt|strContains|i18n(JS)?|setClientData)\\b"
						},
						{
							"name": "support.function",
							"match": "\\bnoAutoescape\\b"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment",
					"match": "//.*"
				},
				{
					"name": "comment",
					"begin": "/\\*\\*",
					"end": "\\*/",
					"patterns": [
						{
							"match": "(@js|@css|@dependsOn) .*",
							"captures": {
								"1": {
									"name": "entity.name.type"
								}
							}
						},
						{
							"match": "(@param\\??) ([\\w\\d]+) ?(.*)?",
							"captures": {
								"1": {
									"name": "entity.name.type"
								},
								"2": {
									"name": "variable.parameter"
								},
								"3": {
									"name": "comment"
								}
							}
						},
						{
							"name": "keyword.control",
							"match": "(@client|@layout)"
						}
					]
				}
			]
		},
		"html": {
			"name": "support.function",
			"begin": "</?\\w+",
			"end": "/?>",
			"beginCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"endCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"patterns": [
				{
					"include": "#soy"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"include": "#soy"
						},
						{
							"include": "#strings"
						}
					]
				},
				{
					"name": "string.quoted.double",
					"begin": "\\'",
					"end": "\\'",
					"patterns": [
						{
							"include": "#soy"
						}
					]
				}
			]
		}
	},
	"scopeName": "source.soy"
}
