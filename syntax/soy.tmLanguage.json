{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "soy",
	"fileTypes": [
		"soy"
	],
	"patterns": [
		{
			"include": "#soy"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#html"
		},
		{
			"include": "#import"
		}
	],
	"repository": {
		"soy": {
			"patterns": [
				{
					"begin": "({)(literal)(})",
					"end": "({/)(literal)(})",
					"beginCaptures": {
						"1": {
							"name": "support.variable"
						},
						"2": {
							"name": "entity.name.tag"
						},
						"3": {
							"name": "support.variable"
						}
					},
					"endCaptures": {
						"1": {
							"name": "support.variable"
						},
						"2": {
							"name": "entity.name.tag"
						},
						"3": {
							"name": "support.variable"
						}
					}
				},
				{
					"begin": "{",
					"end": "}",
					"beginCaptures": {
						"0": {
							"name": "support.variable"
						}
					},
					"endCaptures": {
						"0": {
							"name": "support.variable"
						}
					},
					"patterns": [
						{
							"name": "entity.name.tag",
							"match": "\\b(and|case|debugger|default|elseif|else|export|extern|fallbackmsg|false|foreach|for|ifempty|if|in|javaimpl|jsimpl|lb|let|log|key|msg|nil|not|null|or|plural|print|rb|sp|switch|true|velog)\\b"
						},
						{
							"match": "(@(param|inject|state|attribute)\\??)\\s+([\\w\\d]+)\\s*:\\s*(?:([\\w\\d.]+)(?:<([\\w\\d.]+)>)?)?",
							"captures": {
								"1": {
									"name": "entity.name.type"
								},
								"3": {
									"name": "variable.parameter"
								},
								"4": {
									"name": "support.function"
								},
								"5": {
									"name": "support.function"
								}
							}
						},
						{
							"match": "(@attribute)\\s+(\\*)",
							"captures": {
								"1": {
									"name": "entity.name.type"
								},
								"2": {
									"name": "support.variable"
								}
							}
						},
						{
							"match": "\\b(deltemplate|template|element|call|delcall|dynacall|namespace|delpackage|package)\\b(?:\\s+([\\w\\d.]+))?",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"match": "\\b(param)(?:\\s+(\\w+)\\s*:?)?",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "entity.name.type"
								}
							}
						},
						{
							"match": "\\b(kind|autoescape|allowemptydefault|variant|data|requirecsspath|cssprefix|cssbase|visibility|method|params|return|type|namespace|function|component|whitespace|meaning|desc|genders|alternateId)=",
							"captures": {
								"1": {
									"name": "support.function"
								}
							}
						},
						{
							"match": "\\b(alias)\\s+([\\w\\d.]*)(?:\\s+(as)\\s+([\\w\\d.]*))?",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								},
								"3": {
									"name": "entity.name.type"
								},
								"4": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"match": "\\b(const)\\s+(\\w+)",
							"captures": {
								"1": {
									"name": "entity.name.tag"
								},
								"2": {
									"name": "variable.parameter"
								}
							}
						},
						{
							"name": "variable.parameter",
							"match": "\\$[\\w\\d.?\\[\\]]+"
						},
						{
							"name": "keyword.control",
							"match": "\\b(isFirst|isLast|index|quoteKeysIfJs|i18n(JS)?|setClientData|injectedData)\\b"
						},
						{
							"comment": "Built-in functions. See https://github.com/google/closure-templates/tree/master/java/src/com/google/template/soy/basicfunctions",
							"name": "keyword.control",
							"match": "\\b(augmentMap|ceiling|concatLists|floor|htmlToText|isNonnull|isNull|join|keys|legacyObjectMapToMap|length|listContains|mapKeys|mapToLegacyObjectMap|max|min|parseFloat|parseInt|randomInt|range|round|sqrt|strContains|strIndexOf|strLen|strSmsUriToUri|strSub|strToAsciiLowerCase|strToAsciiUpperCase)\\b"
						},
						{
							"name": "support.function",
							"match": "\\bnoAutoescape\\b"
						},
						{
							"match": "\\b(truncate)\\s*(:)\\s*(\\d+)\\b",
							"captures": {
								"1": {
									"name": "support.function"
								},
								"2": {
									"name": "support.variable"
								},
								"3": {
									"name": "constant.character.escape"
								}
							}
						},
						{
							"include": "#strings"
						},
						{
							"include": "#comments"
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"name": "comment",
					"match": "//.*"
				},
				{
					"name": "comment",
					"begin": "/\\*\\*",
					"end": "\\*/",
					"patterns": [
						{
							"match": "(@js|@css|@dependsOn) .*",
							"captures": {
								"1": {
									"name": "entity.name.type"
								}
							}
						},
						{
							"match": "(@param\\??)\\s+([\\w\\d]+) ?(.*)?",
							"captures": {
								"1": {
									"name": "entity.name.type"
								},
								"2": {
									"name": "variable.parameter"
								},
								"3": {
									"name": "comment"
								}
							}
						},
						{
							"name": "keyword.control",
							"match": "(@client|@layout)"
						}
					]
				},
				{
					"name": "comment",
					"begin": "/\\*",
					"end": "\\*/"
				}
			]
		},
		"html": {
			"name": "support.function",
			"begin": "</?\\w+",
			"end": "/?>",
			"beginCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"endCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"patterns": [
				{
					"include": "#soy"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				}
			]
		},
		"import": {
			"name": "support.function",
			"begin": "import",
			"end": ";",
			"beginCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"endCaptures": {
				"0": {
					"name": "entity.name.tag"
				}
			},
			"patterns": [
				{
					"include": "#comments"
				},
				{
					"include": "#strings"
				},
				{
					"match": "\\s+(\\*)\\s+(as)\\s+(\\w+)\\s+(from)\\b",
					"captures": {
						"1": {
							"name": "support.variable"
						},
						"2": {
							"name": "entity.name.tag"
						},
						"3": {
							"name": "variable.parameter"
						},
						"4": {
							"name": "entity.name.tag"
						}
					}
				},
				{
					"match": "({)\\s*((\\w+)(\\s+(as)\\s+(\\w+))?)(\\s*,\\s*(\\w+)(\\s+(as)\\s+(\\w+))?)*\\s*(})\\s*(from)\\b",
					"captures": {
						"1": {
							"name": "support.variable"
						},
						"3": {
							"name": "variable.parameter"
						},
						"5": {
							"name": "entity.name.tag"
						},
						"6": {
							"name": "variable.parameter"
						},
						"8": {
							"name": "variable.parameter"
						},
						"10": {
							"name": "entity.name.tag"
						},
						"11": {
							"name": "variable.parameter"
						},
						"12": {
							"name": "support.variable"
						},
						"13": {
							"name": "entity.name.tag"
						}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"include": "#escaped-character"
						},
						{
							"include": "#soy"
						},
						{
							"include": "#html"
						}
					]
				},
				{
					"name": "string.quoted.single",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"include": "#escaped-character"
						},
						{
							"include": "#soy"
						},
						{
							"include": "#html"
						}
					]
				}
			]
		},
		"escaped-character": {
			"patterns": [
				{
					"name": "constant.character.escape",
					"match": "\\\\."
				}
			]
		}
	},
	"scopeName": "source.soy"
}
